// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var $, $async, CND, DB, DEMO, ICQL, INTERTYPE, PATH, PD, assign, badge, boolean_as_int, debug, echo, help, info, inspect, join_path, jr, rpr, select, urge, warn, whisper, xrpr, xrpr2;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = '明快打字机/EXPERIMENTS/ICQL+SQLITE';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  PATH = require('path');

  // FS                        = require 'fs'
  PD = require('pipedreams');

  ({$, $async, select} = PD);

  ({assign, jr} = CND);

  //...........................................................................................................
  join_path = function(...P) {
    return PATH.resolve(PATH.join(...P));
  };

  boolean_as_int = function(x) {
    if (x) {
      return 1;
    } else {
      return 0;
    }
  };

  ({inspect} = require('util'));

  xrpr = function(x) {
    return inspect(x, {
      colors: true,
      breakLength: 2e308,
      maxArrayLength: 2e308,
      depth: 2e308
    });
  };

  xrpr2 = function(x) {
    return inspect(x, {
      colors: true,
      breakLength: 80,
      maxArrayLength: 2e308,
      depth: 2e308
    });
  };

  //...........................................................................................................
  ICQL = require('icql');

  INTERTYPE = require('../types');

  DB = require('../db');

  //-----------------------------------------------------------------------------------------------------------
  this._prepare_db = function(db) {
    db.import_table_unames();
    db.import_table_uname_tokens();
    db.import_table_unicode_test();
    db.create_view_unicode_test_with_end_markers();
    db.fts5_create_and_populate_token_tables();
    db.spellfix_create_editcosts();
    db.spellfix_create_and_populate_token_tables();
    db.spellfix_populate_custom_codes();
    //.........................................................................................................
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.demo_fts5_token_phrases = function(db) {
    var i, len, q, ref, row, token_phrases;
    //.........................................................................................................
    whisper('-'.repeat(108));
    urge('demo_fts5_token_phrases');
    token_phrases = ['latin alpha', 'latin alpha small', 'latin alpha capital', 'greek alpha', 'greek alpha small', 'cyrillic small a'];
    for (i = 0, len = token_phrases.length; i < len; i++) {
      q = token_phrases[i];
      urge(rpr(q));
      ref = db.fts5_fetch_uname_token_matches({
        q,
        limit: 5
      });
      for (row of ref) {
        info(xrpr(row));
      }
    }
    //.........................................................................................................
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.demo_fts5_broken_phrases = function(db) {
    /* TAINT `initials` should be in `db.$.settings` */
    var attempt, broken_phrase, broken_phrases, cache, hit, i, initials, j, len, len1, q, ref, ref1, row, tokens;
    //.........................................................................................................
    whisper('-'.repeat(108));
    urge('demo_fts5_broken_phrases');
    cache = {};
    broken_phrases = ['latn alp', 'latn alp smll', 'latn alp cap', 'greek alpha', 'cap greek alpha', 'greek alpha small', 'cyrillic small a', 'ktkn', 'katakana', 'hirag no', 'no', 'xxx', 'istanbul', 'capital', 'mycode', '123', '^', '´', '`', '"', '~', '~ a', '~ a small', '~ a capital', '_', '-', '~~', '%', '_', '~~', '%', '%0', '%0 sign', 'kxr', 'kxr tree', 'n14 circled', 'circled n14', 'fourteen circled', '- l'];
    initials = 2;
    tokens = [];
    for (i = 0, len = broken_phrases.length; i < len; i++) {
      broken_phrase = broken_phrases[i];
      ref = broken_phrase.split(/\s+/);
      //.......................................................................................................
      for (j = 0, len1 = ref.length; j < len1; j++) {
        attempt = ref[j];
        if ((hit = cache[attempt]) === void 0) {
          hit = db.$.first_value(db.match_uname_tokens_spellfix({
            q: attempt,
            initials,
            limit: 1
          }));
          cache[attempt] = hit != null ? hit : null;
        }
        if (hit != null) {
          // debug '27762', attempt, hit
          tokens.push(hit);
        }
      }
      //.......................................................................................................
      debug(tokens);
      if (tokens.length < 1) {
        warn(`no token matches for ${rpr(broken_phrase)}`);
        continue;
      }
      //.......................................................................................................
      q = tokens.join(' ');
      tokens.length = 0;
      //.......................................................................................................
      urge(CND.white(broken_phrase), CND.grey('-->'), CND.orange(rpr(q)));
      ref1 = db.fts5_fetch_uname_token_matches({
        q,
        limit: 5
      });
      for (row of ref1) {
        info(xrpr(row));
      }
    }
    //.........................................................................................................
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.demo_uname_tokens = function(db) {
    var ref, results, row;
    ref = db.$.query("select * from uname_tokens;");
    results = [];
    for (row of ref) {
      results.push(info(xrpr(row)));
    }
    return results;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.demo_spellfix = function(db) {
    /* TAINT `initials` should be in `db.$.settings` */
    var dt, hits, i, initials, len, q, qphonehash, t0, t1, tps, words;
    whisper('-'.repeat(108));
    urge('demo_spellfix');
    // info ( xrpr row ) for row from db.$.query 'select * from spellfix_editcosts;'
    // db.$.execute """update spellfix_uname_tokens_vocab set k2 = upper( word );"""
    // db.$.execute """update spellfix_uname_tokens_vocab set k2 = 'CDACM';"""
    // info ( xrpr row ) for row from db.$.query """select * from spellfix_uname_tokens_vocab where word regexp '^[^0-9]' limit 30;"""
    // 'were'
    // 'whether'
    // 'whater'
    // 'thosand'
    // 'fancy'
    // 'fort'
    // 'trof'
    // 'latn'
    // 'cap'
    // 'letr'
    // 'alif'
    // 'hirag'
    // 'hrg'
    // 'hrgn'
    // 'cyr'
    // 'grk'
    // 'grek'
    // 'no'
    // 'kata'
    // 'katak'
    // 'ktkn'
    // 'katkn'
    // 'ktkna'
    // 'ktakn'
    // 'standard'
    // 'hiero'
    // 'egt'
    words = ['egyp', 'hgl', 'xxx', 'istanbul', 'capital', 'mycode', '123', '^', '´', '`', '"', '~', '_', '-', '~~', '%', '_', '~~', '%', '%0', 'kxr'];
    initials = 2;
    t0 = Date.now();
    for (i = 0, len = words.length; i < len; i++) {
      q = words[i];
      qphonehash = db.$.first_value(db.get_spellfix1_phonehash({q}));
      // for row from db.match_uname_tokens_spellfix_with_scores { q, initials, limit: 15, }
      //   debug '----', q, 'I', initials, 'S', row.score, 'L', row.matchlen, 'D', row.distance, row.source, row.qphonehash, row.wphonehash, row.word
      hits = db.$.all_first_values(db.match_uname_tokens_spellfix({
        q,
        initials,
        limit: 5
      }));
      hits = hits.join(', ');
      info(`${q} (${qphonehash}) --> ${hits}`);
    }
    t1 = Date.now();
    dt = t1 - t0;
    tps = dt / words.length;
    urge(`took ${dt} ms (${tps.toFixed(1)} ms per search)`);
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.demo_json = function(db) {
    var ref, ref1, ref2, ref3, row;
    whisper('-'.repeat(108));
    urge('demo_json');
    info(db.$.all_rows(db.$.query("select\n    x.words                       as words,\n    json_array_length ( x.words ) as word_count\n  from ( select\n    json( get_words( 'helo world these are many words' ) ) as words ) as x\n;")));
    whisper('---------------------------------------------');
    ref = db.$.query("select\n    id,\n    -- key,\n    type,\n    value\n  from json_each( json( get_words( 'helo world these are many words' ) ) )\n;");
    for (row of ref) {
      info(row);
    }
    whisper('---------------------------------------------');
    ref1 = db.$.query("select\n    id,\n    -- key,\n    type,\n    value\n  from json_each( json( '[1,1.5,1e6,true,false,\"x\",null,{\"a\":42},[1,2,3]]' ) )\n;");
    for (row of ref1) {
      info(row);
    }
    whisper('---------------------------------------------');
    ref2 = db.$.query("select json_group_array( names.name )\n  from (\n    select null as name where false   union all\n    select 'alice'                    union all\n    select 'bob'                      union all\n    select 'carlito'                  union all\n    select 'domian'                   union all\n    select 'franz'                    union all\n    select null where false\n    ) as names\n;");
    for (row of ref2) {
      info(row);
    }
    whisper('---------------------------------------------');
    info(rpr(JSON.parse(db.$.first_value(db.$.query("select\n    json_group_object( staff.name, staff.extension ) as staff\n  from (\n    select null as name, null as extension where false  union all\n    select 'alice',   123                               union all\n    select 'bob',     150                               union all\n    select 'carlito', 177                               union all\n    select 'domian',  204                               union all\n    select 'franz',   231                               union all\n    select null, null where false\n    ) as staff\n;")))));
    whisper('---------------------------------------------');
    ref3 = db.$.query("select\n    id                            as nr,\n    replace( fullkey, '$', '' )   as path,\n    key                           as key,\n    atom                          as value\n  from json_tree( json( '[1,1.5,1e6,true,false,\"x\",null,{\"a\":42,\"c\":[1,{\"2\":\"sub\"},3]}]' ) ) as t\n  where t.fullkey != '$'\n;");
    for (row of ref3) {
      info(xrpr(row));
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.demo_catalog = function(db) {
    var entry, ref, row;
    ref = db.$.catalog();
    for (row of ref) {
      entry = [];
      entry.push(CND.grey(row.type));
      entry.push(CND.white(row.name));
      if (row.name !== row.tbl_name) {
        entry.push(CND.yellow(`(${row.tbl_name})`));
      }
      info(entry.join(' '));
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.demo_db_type_of = function(db, name) {
    return db.$.type_of(name);
  };

  // for row from db.$.catalog()
  //   return row.type if row.name is name
  // return null

  //-----------------------------------------------------------------------------------------------------------
  this.demo_longest_matching_prefix = function(db) {
    var chrs, count, field, i, len, nr, probe, probes, ref, row, table;
    count = db.$.first_value(db.$.query("select count(*) from uname_tokens;"));
    info(`selecting from ${count} entries in uname_tokens`);
    probes = ['gr', 'alpha', 'beta', 'c', 'ca', 'cap', 'capi', 'omega', 'circ', 'circle'];
    for (i = 0, len = probes.length; i < len; i++) {
      probe = probes[i];
      info(CND.grey('--------------------------------------------------------'));
      nr = 0;
      ref = db.longest_matching_prefix_in_uname_tokens({
        q: probe,
        limit: 10
      });
      //.......................................................................................................
      for (row of ref) {
        nr += +1;
        // info probe, ( xrpr row )
        info(CND.grey(nr), CND.grey(row.delta_length), CND.blue(probe), CND.grey('->'), CND.lime(row.uname_token));
      }
      //.......................................................................................................
      table = 'uname_tokens';
      field = 'uname_token';
      chrs = Array.from(db.$.first_value(db.next_characters({
        prefix: probe,
        table,
        field
      })));
      info(probe, '...', chrs.join(' '));
    }
    //.........................................................................................................
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.demo_nextchr = function(db) {
    var chrs, field, i, len, probe, probes, table;
    //.........................................................................................................
    // whisper '-'.repeat 108
    // for row from db.$.query """select * from unicode_test;"""
    //   info ( xrpr row )
    //.........................................................................................................
    whisper('-'.repeat(108));
    probes = ['-', 'っ', 'か', '\\', 'ku', 'a', 'x'];
    // table = 'unicode_test'
    table = 'unicode_test_with_end_markers';
    field = 'word';
    for (i = 0, len = probes.length; i < len; i++) {
      probe = probes[i];
      chrs = Array.from(db.$.first_value(db.next_characters({
        prefix: probe,
        table,
        field
      })));
      info(probe, '...', chrs.join(' '));
    }
    //.........................................................................................................
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.demo_edict2u = function(db) {
    var i, len, limit, nr, path, probe, probes, ref, row;
    // debug INTERTYPE.all_keys_of db.$
    db.create_table_edict2u();
    console.time('populate-edict2u');
    path = join_path(__dirname, '../../.cache/edict2u.sql');
    help(`reading ${PATH.relative(process.cwd(), path)}`);
    db.$.read(path);
    help("creating indexes");
    db.create_indexes_for_table_edict2u();
    console.timeEnd('populate-edict2u');
    probes = ['ち', 'ちゅ', 'ちゅう', 'ちゅうご', 'ちゅうごく', 'ちゅうごくの', 'ちゅうごくのせ', 'ちゅうごくのせい', 'ちゅうごくのせいふ'];
    limit = 10;
    for (i = 0, len = probes.length; i < len; i++) {
      probe = probes[i];
      whisper('-'.repeat(108));
      info(probe);
      nr = 0;
      ref = db.longest_matching_prefix_in_edict2u({
        q: probe,
        limit
      });
      for (row of ref) {
        nr += +1;
        info(CND.grey(nr), CND.grey(row.delta_length), CND.grey('->'), CND.lime(row.candidate), CND.white(row.reading));
      }
    }
    // for row from db.$.query "select * from edict2u where reading like 'ちゅうごく%' order by reading limit 5;"
    //   info row.candidate
    //.........................................................................................................
    return null;
  };

  //###########################################################################################################
  if (module.parent == null) {
    DEMO = this;
    (function() {
      var db;
      db = DB.new_db({
        clear: false
      });
      // db = DB.new_db { clear: true, }
      // DEMO._prepare_db db
      // db = await DEMO.new_db()
      // DEMO.demo_uname_tokens db
      // DEMO.demo_fts5_token_phrases     db
      // urge '33342', db.$.first_value db.$.query """select plus( 34, 56 );"""
      // urge '33342', db.$.first_value db.$.query """select e( plus( 'here', 'there' ) );"""
      // info row for row from db.$.query """
      //   select split( 'helo world whassup', s.value ) as word
      //   from generate_series( 1, 10 ) as s
      //   where word is not null
      //   ;
      //   """
      // DEMO.demo_spellfix                 db
      // DEMO.demo_fts5_broken_phrases      db
      // DEMO.demo_json                     db
      DEMO.demo_catalog(db);
      info('µ33344', rpr(DEMO.demo_db_type_of(db, 'edict2u')));
      info('µ33344', rpr(DEMO.demo_db_type_of(db, 'xxx')));
      // DEMO.demo_longest_matching_prefix  db
      // DEMO.demo_edict2u                  db
      // DEMO.demo_nextchr                  db
      return null;
    })();
  }

}).call(this);

//# sourceMappingURL=using-icql-with-sqlite.js.map
