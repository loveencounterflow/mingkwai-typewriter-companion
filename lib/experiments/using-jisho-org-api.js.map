{
  "version": 3,
  "file": "using-jisho-org-api.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/using-jisho-org-api.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = '明快打字机/EXPERIMENTS/USING-JISHO-ORG-API'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nPD                        = require 'pipedreams'\n{ $\n  $async\n  select }                = PD\n{ assign\n  jr }                    = CND\nrequest\t\t\t\t\t\t\t\t\t\t= require 'request-promise-native'\nrequire '../exception-handler'\n\nurl = 'https://jisho.org/api/v1/search/words?keyword=にほん'\nurl = 'https://jisho.org/api/v1/search/words?keyword=%E3%81%AB%E3%81%BB%E3%82%93'\nurl = 'https://jisho.org/api/v1/search/words?keyword=%E3%81%BE%E3%82%82%E3%82%8B'\n\n# read_as_stream = ( url ) ->\n# \t### API gives back one blob of JSON, so better off w/ promised-based interface ###\n# \tsource = PD.read_from_nodejs_stream request.get url\n# \tpipeline = []\n# \tpipeline.push source\n# \tpipeline.push PD.$split()\n# \tpipeline.push PD.$show()\n# \tpipeline.push PD.$drain()\n# \tPD.pull pipeline...\n# read_as_stream 'https://jisho.org/api/v1/search/words?keyword=%E3%81%AB%E3%81%BB%E3%82%93'\n\nlookup_in_jishodotorg = ( q ) ->\n\tbase_url \t= 'https://jisho.org/api/v1/search/words'\n\tresponse \t= await request.get base_url, { qs: { keyword: q, }, json: true, }\n\tinfo 'µ66474', q\n\tfor entry in response.data\n\t\t# continue unless entry.is_common\n\t\tcontinue unless entry.japanese?\n\t\t#.......................................................................................................\n\t\t# seen \t\t= new Set()\n\t\tenglish = new Set()\n\t\tif entry.senses?\n\t\t\tfor sense in entry.senses\n\t\t\t\tcontinue unless sense.english_definitions?\n\t\t\t\tfor definition in sense.english_definitions\n\t\t\t\t\tenglish.add definition\n\t\tenglish = [ english.keys()... ].join '; '\n\t\t#.......................................................................................................\n\t\tseen = new Set()\n\t\tfor { word, reading, } in entry.japanese\n\t\t\tcontinue unless reading? and reading.startsWith q\n\t\t\tcontinue unless word?\n\t\t\tcontinue if seen.has word\n\t\t\tseen.add word\n\t\t\turge word, '[' + reading + ']', ( CND.lime english )\n\treturn null\n\ndo ->\n\t# await lookup_in_jishodotorg 'きょう'\n\tawait lookup_in_jishodotorg 'かく'\n\tawait lookup_in_jishodotorg 'しみず'\n\tawait lookup_in_jishodotorg 'きよみず'\n\tawait lookup_in_jishodotorg 'taiwan'\n\tawait lookup_in_jishodotorg '父親'\n\n"
  ]
}