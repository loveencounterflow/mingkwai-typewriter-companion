{
  "version": 3,
  "file": "using-icql-with-sqlite.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/using-icql-with-sqlite.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = '明快打字机/EXPERIMENTS/ICQL+SQLITE'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\n# FS                        = require 'fs'\nPD                        = require 'pipedreams'\n{ $\n  $async\n  select }                = PD\n{ assign\n  jr }                    = CND\n#...........................................................................................................\njoin_path                 = ( P... ) -> PATH.resolve PATH.join P...\nboolean_as_int            = ( x ) -> if x then 1 else 0\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\nxrpr2                     = ( x ) -> inspect x, { colors: yes, breakLength: 80,       maxArrayLength: Infinity, depth: Infinity, }\n#...........................................................................................................\nICQL                      = require 'icql'\nINTERTYPE                 = require '../types'\nDB                        = require '../db'\n\n#-----------------------------------------------------------------------------------------------------------\n@_prepare_db = ( db ) ->\n  db.import_table_unames()\n  db.import_table_uname_tokens()\n  db.import_table_unicode_test()\n  db.create_view_unicode_test_with_end_markers()\n  db.fts5_create_and_populate_token_tables()\n  db.spellfix_create_editcosts()\n  db.spellfix_create_and_populate_token_tables()\n  db.spellfix_populate_custom_codes()\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_fts5_token_phrases = ( db ) ->\n  #.........................................................................................................\n  whisper '-'.repeat 108\n  urge 'demo_fts5_token_phrases'\n  token_phrases = [\n    'latin alpha'\n    'latin alpha small'\n    'latin alpha capital'\n    'greek alpha'\n    'greek alpha small'\n    'cyrillic small a'\n    ]\n  for q in token_phrases\n    urge rpr q\n    info ( xrpr row ) for row from db.fts5_fetch_uname_token_matches { q, limit: 5, }\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_fts5_broken_phrases = ( db ) ->\n  #.........................................................................................................\n  whisper '-'.repeat 108\n  urge 'demo_fts5_broken_phrases'\n  cache           = {}\n  broken_phrases  = [\n    'latn alp'\n    'latn alp smll'\n    'latn alp cap'\n    'greek alpha'\n    'cap greek alpha'\n    'greek alpha small'\n    'cyrillic small a'\n    'ktkn'\n    'katakana'\n    'hirag no'\n    'no'\n    'xxx'\n    'istanbul'\n    'capital'\n    'mycode'\n    '123'\n    '^'\n    '´'\n    '`'\n    '\"'\n    '~'\n    '~ a'\n    '~ a small'\n    '~ a capital'\n    '_'\n    '-'\n    '~~'\n    '%'\n    '_'\n    '~~'\n    '%'\n    '%0'\n    '%0 sign'\n    'kxr'\n    'kxr tree'\n    'n14 circled'\n    'circled n14'\n    'fourteen circled'\n    '- l'\n    ]\n  ### TAINT `initials` should be in `db.$.settings` ###\n  initials  = 2\n  tokens    = []\n  for broken_phrase in broken_phrases\n    #.......................................................................................................\n    for attempt in broken_phrase.split /\\s+/\n      if ( hit = cache[ attempt ] ) is undefined\n        hit               = db.$.first_value db.match_uname_tokens_spellfix { q: attempt, initials, limit: 1, }\n        cache[ attempt ]  = hit ? null\n        # debug '27762', attempt, hit\n      tokens.push hit if hit?\n    #.......................................................................................................\n    debug tokens\n    if tokens.length < 1\n      warn \"no token matches for #{rpr broken_phrase}\"\n      continue\n    #.......................................................................................................\n    q = tokens.join ' '\n    tokens.length = 0\n    #.......................................................................................................\n    urge ( CND.white broken_phrase ), ( CND.grey '-->' ), ( CND.orange rpr q )\n    info ( xrpr row ) for row from db.fts5_fetch_uname_token_matches { q, limit: 5, }\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_uname_tokens = ( db ) ->\n  info ( xrpr row ) for row from db.$.query \"\"\"select * from uname_tokens;\"\"\"\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_spellfix = ( db ) ->\n  whisper '-'.repeat 108\n  urge 'demo_spellfix'\n  # info ( xrpr row ) for row from db.$.query 'select * from spellfix_editcosts;'\n  # db.$.execute \"\"\"update spellfix_uname_tokens_vocab set k2 = upper( word );\"\"\"\n  # db.$.execute \"\"\"update spellfix_uname_tokens_vocab set k2 = 'CDACM';\"\"\"\n  # info ( xrpr row ) for row from db.$.query \"\"\"select * from spellfix_uname_tokens_vocab where word regexp '^[^0-9]' limit 30;\"\"\"\n  words = [\n    # 'were'\n    # 'whether'\n    # 'whater'\n    # 'thosand'\n    # 'fancy'\n    # 'fort'\n    # 'trof'\n    # 'latn'\n    # 'cap'\n    # 'letr'\n    # 'alif'\n    # 'hirag'\n    # 'hrg'\n    # 'hrgn'\n    # 'cyr'\n    # 'grk'\n    # 'grek'\n    # 'no'\n    # 'kata'\n    # 'katak'\n    # 'ktkn'\n    # 'katkn'\n    # 'ktkna'\n    # 'ktakn'\n    # 'standard'\n    # 'hiero'\n    # 'egt'\n    'egyp'\n    'hgl'\n    'xxx'\n    'istanbul'\n    'capital'\n    'mycode'\n    '123'\n    '^'\n    '´'\n    '`'\n    '\"'\n    '~'\n    '_'\n    '-'\n    '~~'\n    '%'\n    '_'\n    '~~'\n    '%'\n    '%0'\n    'kxr'\n    ]\n  ### TAINT `initials` should be in `db.$.settings` ###\n  initials = 2\n  t0 = Date.now()\n  for q in words\n    qphonehash = db.$.first_value db.get_spellfix1_phonehash { q, }\n    # for row from db.match_uname_tokens_spellfix_with_scores { q, initials, limit: 15, }\n    #   debug '----', q, 'I', initials, 'S', row.score, 'L', row.matchlen, 'D', row.distance, row.source, row.qphonehash, row.wphonehash, row.word\n    hits = db.$.all_first_values db.match_uname_tokens_spellfix { q, initials, limit: 5, }\n    hits = hits.join ', '\n    info \"#{q} (#{qphonehash}) --> #{hits}\"\n  t1  = Date.now()\n  dt  = t1 - t0\n  tps = dt / words.length\n  urge \"took #{dt} ms (#{tps.toFixed 1} ms per search)\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_json = ( db ) ->\n  whisper '-'.repeat 108\n  urge 'demo_json'\n  info db.$.all_rows db.$.query \"\"\"\n    select\n        x.words                       as words,\n        json_array_length ( x.words ) as word_count\n      from ( select\n        json( get_words( 'helo world these are many words' ) ) as words ) as x\n    ;\"\"\"\n  whisper '---------------------------------------------'\n  info row for row from db.$.query \"\"\"\n    select\n        id,\n        -- key,\n        type,\n        value\n      from json_each( json( get_words( 'helo world these are many words' ) ) )\n    ;\"\"\"\n  whisper '---------------------------------------------'\n  info row for row from db.$.query \"\"\"\n    select\n        id,\n        -- key,\n        type,\n        value\n      from json_each( json( '[1,1.5,1e6,true,false,\"x\",null,{\"a\":42},[1,2,3]]' ) )\n    ;\"\"\"\n  whisper '---------------------------------------------'\n  info row for row from db.$.query \"\"\"\n    select json_group_array( names.name )\n      from (\n        select null as name where false   union all\n        select 'alice'                    union all\n        select 'bob'                      union all\n        select 'carlito'                  union all\n        select 'domian'                   union all\n        select 'franz'                    union all\n        select null where false\n        ) as names\n    ;\"\"\"\n  whisper '---------------------------------------------'\n  info rpr JSON.parse db.$.first_value db.$.query \"\"\"\n    select\n        json_group_object( staff.name, staff.extension ) as staff\n      from (\n        select null as name, null as extension where false  union all\n        select 'alice',   123                               union all\n        select 'bob',     150                               union all\n        select 'carlito', 177                               union all\n        select 'domian',  204                               union all\n        select 'franz',   231                               union all\n        select null, null where false\n        ) as staff\n    ;\"\"\"\n  whisper '---------------------------------------------'\n  info xrpr row for row from db.$.query \"\"\"\n    select\n        id                            as nr,\n        replace( fullkey, '$', '' )   as path,\n        key                           as key,\n        atom                          as value\n      from json_tree( json( '[1,1.5,1e6,true,false,\"x\",null,{\"a\":42,\"c\":[1,{\"2\":\"sub\"},3]}]' ) ) as t\n      where t.fullkey != '$'\n    ;\"\"\"\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_catalog = ( db ) ->\n  for row from db.$.catalog()\n    entry = []\n    entry.push CND.grey   row.type\n    entry.push CND.white  row.name\n    entry.push CND.yellow \"(#{row.tbl_name})\" if row.name isnt row.tbl_name\n    info entry.join ' '\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_db_type_of = ( db, name ) ->\n  return db.$.type_of name\n  # for row from db.$.catalog()\n  #   return row.type if row.name is name\n  # return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_longest_matching_prefix = ( db ) ->\n  count = db.$.first_value db.$.query \"\"\"select count(*) from uname_tokens;\"\"\"\n  info \"selecting from #{count} entries in uname_tokens\"\n  probes = [\n    'gr'\n    'alpha'\n    'beta'\n    'c'\n    'ca'\n    'cap'\n    'capi'\n    'omega'\n    'circ'\n    'circle'\n    ]\n  for probe in probes\n    info ( CND.grey '--------------------------------------------------------' )\n    nr = 0\n    #.......................................................................................................\n    for row from db.longest_matching_prefix_in_uname_tokens { q: probe, limit: 10, }\n      nr += +1\n      # info probe, ( xrpr row )\n      info ( CND.grey nr ), ( CND.grey row.delta_length ), ( CND.blue probe ), ( CND.grey '->' ), ( CND.lime row.uname_token )\n    #.......................................................................................................\n    table = 'uname_tokens'\n    field = 'uname_token'\n    chrs  = Array.from db.$.first_value db.next_characters { prefix: probe, table, field, }\n    info probe, '...', ( chrs.join ' ' )\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_nextchr = ( db ) ->\n  #.........................................................................................................\n  # whisper '-'.repeat 108\n  # for row from db.$.query \"\"\"select * from unicode_test;\"\"\"\n  #   info ( xrpr row )\n  #.........................................................................................................\n  whisper '-'.repeat 108\n  probes = [\n    '-'\n    'っ'\n    'か'\n    '\\\\'\n    'ku'\n    'a'\n    'x' ]\n  # table = 'unicode_test'\n  table = 'unicode_test_with_end_markers'\n  field = 'word'\n  for probe in probes\n    chrs  = Array.from db.$.first_value db.next_characters { prefix: probe, table, field, }\n    info probe, '...', ( chrs.join ' ' )\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@demo_edict2u = ( db ) ->\n  # debug INTERTYPE.all_keys_of db.$\n  db.create_table_edict2u()\n  console.time 'populate-edict2u'\n  path = join_path __dirname, '../../.cache/edict2u.sql'\n  help \"reading #{PATH.relative process.cwd(), path}\"\n  db.$.read path\n  help \"creating indexes\"\n  db.create_indexes_for_table_edict2u()\n  console.timeEnd 'populate-edict2u'\n  probes = [\n    'ち'\n    'ちゅ'\n    'ちゅう'\n    'ちゅうご'\n    'ちゅうごく'\n    'ちゅうごくの'\n    'ちゅうごくのせ'\n    'ちゅうごくのせい'\n    'ちゅうごくのせいふ'\n    ]\n  limit = 10\n  for probe in probes\n    whisper '-'.repeat 108\n    info probe\n    nr = 0\n    for row from db.longest_matching_prefix_in_edict2u { q: probe, limit, }\n      nr += +1\n      info ( CND.grey nr ), ( CND.grey row.delta_length ), ( CND.grey '->' ), ( CND.lime row.candidate ), ( CND.white row.reading )\n  # for row from db.$.query \"select * from edict2u where reading like 'ちゅうごく%' order by reading limit 5;\"\n  #   info row.candidate\n  #.........................................................................................................\n  return null\n\n\n\n############################################################################################################\nunless module.parent?\n  DEMO = @\n  do ->\n    db = DB.new_db { clear: false, }\n    # db = DB.new_db { clear: true, }\n    # DEMO._prepare_db db\n    # db = await DEMO.new_db()\n    # DEMO.demo_uname_tokens db\n    # DEMO.demo_fts5_token_phrases     db\n    # urge '33342', db.$.first_value db.$.query \"\"\"select plus( 34, 56 );\"\"\"\n    # urge '33342', db.$.first_value db.$.query \"\"\"select e( plus( 'here', 'there' ) );\"\"\"\n    # info row for row from db.$.query \"\"\"\n    #   select split( 'helo world whassup', s.value ) as word\n    #   from generate_series( 1, 10 ) as s\n    #   where word is not null\n    #   ;\n    #   \"\"\"\n    # DEMO.demo_spellfix                 db\n    # DEMO.demo_fts5_broken_phrases      db\n    # DEMO.demo_json                     db\n    DEMO.demo_catalog                  db\n    info 'µ33344', rpr DEMO.demo_db_type_of db, 'edict2u'\n    info 'µ33344', rpr DEMO.demo_db_type_of db, 'xxx'\n    # DEMO.demo_longest_matching_prefix  db\n    # DEMO.demo_edict2u                  db\n    # DEMO.demo_nextchr                  db\n    return null\n\n\n"
  ]
}