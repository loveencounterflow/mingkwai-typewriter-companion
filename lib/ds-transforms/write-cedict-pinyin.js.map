{
  "version": 3,
  "file": "write-cedict-pinyin.js",
  "sourceRoot": "../..",
  "sources": [
    "src/ds-transforms/write-cedict-pinyin.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n### TAINTs\n\n* deal with mssing characters\n\n* PY `ü` is written `u:`, use `ü`, `v` to replace\n\n* consider to collapse words from prefixes:\n  咖 ->\n    咖哩\n    咖啡 ->\n      咖啡伴侶\n      咖啡因\n      咖啡館 ->\n        咖啡館兒 ->\n\n###\n\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = '明快打字机/DS-TRANSFORMS/WRITE-CEDICT-PINYIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nPD                        = require 'pipedreams'\n{ $\n  $async\n  select }                = PD\n{ assign\n  jr }                    = CND\nTRIODE                    = require 'triode'\n@_drop_extension          = ( path ) -> path[ ... path.length - ( PATH.extname path ).length ]\n\n#-----------------------------------------------------------------------------------------------------------\nxray = ( text ) -> ( ( ( chr.codePointAt 0 ).toString 16 ) for chr in Array.from text )\n\n#-----------------------------------------------------------------------------------------------------------\n@$as_line = -> $ ( d, send ) => send ( jr d ) + '\\n'\n\n#-----------------------------------------------------------------------------------------------------------\n@$name_fields = ->\n  return $ ( d, send ) =>\n    [ transliteration, target, ] = d\n    send { transliteration, target, }\n\n#-----------------------------------------------------------------------------------------------------------\n@$feed_triode = ->\n  last    = Symbol 'last'\n  triode  = TRIODE.new()\n  return $ { last, }, ( d, send ) =>\n    return send triode if d is last\n    triode.set d.transliteration, ( target = [] ) unless ( target = triode.get d.transliteration )?\n    target.push d.target unless d.target in target\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$split_pinyin_and_gloss = ->\n  pinyin_and_gloss_pattern = /// ^ \\[ (?<pinyin> .+? ) \\] \\s+ \\/ (?<gloss> .+? ) \\/  $ ///\n  return $ ( fields, send ) =>\n    [ kt, ks, pinyin_and_gloss, ] = fields\n    unless ( match = pinyin_and_gloss.match pinyin_and_gloss_pattern )?\n      throw new Error \"µ33833 illegal pinyin_and_gloss: #{rpr pinyin_and_gloss}\"\n    { pinyin\n      gloss }                     = match.groups\n    gloss                         = gloss.split '/'\n    send { kt, ks, pinyin, gloss, }\n\n#-----------------------------------------------------------------------------------------------------------\n@$cleanup_pinyin = ->\n  return $ ( fields, send ) =>\n    fields.pinyin = fields.pinyin.replace /[,\\s0-5]/g, ''\n    fields.pinyin = fields.pinyin.toLowerCase()\n    send fields\n\n#-----------------------------------------------------------------------------------------------------------\n@$distill_traditional = ->\n  return $ ( fields, send ) =>\n    { kt, pinyin, } = fields\n    send { transliteration: pinyin, target: kt, }\n\n#-----------------------------------------------------------------------------------------------------------\n@$write_traditional_cdt = ( target_path ) =>\n  pipeline = []\n  pipeline.push @$distill_traditional()\n  pipeline.push @$feed_triode()\n  pipeline.push $ ( triode, send ) => send triode.as_js_module_text()\n  pipeline.push PD.write_to_file target_path\n  return PD.$tee PD.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@write_keyboard = ( settings ) -> new Promise ( resolve, reject ) =>\n  cdt_target_filename  = ( @_drop_extension PATH.basename settings.source_path ) + '.cdt.js'\n  cdt_target_path      = PATH.resolve PATH.join __dirname, '../../.cache', cdt_target_filename\n  help \"translating #{rpr PATH.relative process.cwd(), settings.source_path}\"\n  #.........................................................................................................\n  convert = =>\n    pipeline = []\n    pipeline.push PD.read_from_file settings.source_path\n    # pipeline.push PD.$split()\n    # pipeline.push PD.$sample 1 / 5000 #, seed: 12\n    # pipeline.push $ ( line, send ) -> send line.replace /\\s+$/, '\\n' # prepare for line-splitting in WSV reader\n    pipeline.push PD.$split_wsv 3\n    pipeline.push @$split_pinyin_and_gloss()\n    pipeline.push @$cleanup_pinyin()\n    # pipeline.push PD.$show()\n    pipeline.push @$write_traditional_cdt cdt_target_path\n    pipeline.push PD.$drain =>\n      help \"wrote output to #{rpr PATH.relative process.cwd(), cdt_target_path}\"\n      resolve()\n    PD.pull pipeline...\n    return null\n  #.........................................................................................................\n  convert()\n  return null\n\n\n############################################################################################################\nunless module.parent?\n  L = @\n  do ->\n    #.......................................................................................................\n    settings =\n      source_path:  PATH.resolve PATH.join __dirname, '../../db/cedict_ts.u8'\n      # postprocess: ( triode ) ->\n      #   triode.disambiguate_subkey 'n', 'n.'\n      #   triode.disambiguate_subkey 'v', 'v.'\n      #   for subkey, superkeys of triode.get_all_superkeys()\n      #     help \"µ46474 resolving #{rpr subkey} -> #{rpr superkeys}\"\n      #     triode.apply_replacements_recursively subkey\n      #   return null\n    await L.write_keyboard settings\n    help 'ok'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  ]
}