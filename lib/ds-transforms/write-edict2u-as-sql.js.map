{
  "version": 3,
  "file": "write-edict2u-as-sql.js",
  "sourceRoot": "../..",
  "sources": [
    "src/ds-transforms/write-edict2u-as-sql.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = '明快打字机/DS-TRANSFORMS/WRITE-CEDICT-PINYIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nPD                        = require 'pipedreams'\n{ $\n  $async\n  select }                = PD\n{ assign\n  jr }                    = CND\nJACONV                    = require 'jaconv'\n@_drop_extension          = ( path ) -> path[ ... path.length - ( PATH.extname path ).length ]\ntypes                     = require '../types'\n#...........................................................................................................\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n#...........................................................................................................\n{ assign\n  abspath }               = require '../helpers'\n#...........................................................................................................\nrequire                   '../exception-handler'\nPSPG                      = require 'pspg'\n#...........................................................................................................\n### TAINT needed for tabular output, to be moved to a package or submodule: ###\n{ to_width, width_of, }   = require 'to-width'\n\n\n#-----------------------------------------------------------------------------------------------------------\nlast_of   = ( x ) -> x[ ( size_of x ) - 1 ]\n@$as_line = => $ ( line, send ) => send line + '\\n'\n\n#-----------------------------------------------------------------------------------------------------------\nas_hepburn = ( text ) ->\n  ### TAINT JACONV doesn't correctly transcribe some Kana; this is to remediate that. Choose a better\n  library for the purpose. ###\n  R = JACONV.toHebon text\n  R = R.replace /ゅ/g, 'YU'\n  R = R.replace /ゃ/g, 'YA'\n  R = R.replace /ょ/g, 'YO'\n  R = R.replace /ゎ/g, 'WA'\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\nas_sql = ( x ) ->\n  validate.text x\n  R = x\n  R = R.replace /'/g, \"''\"\n  return \"'#{R}'\"\n\n#-----------------------------------------------------------------------------------------------------------\n@$split_fields = ->\n  # 臈たける;臈長ける;臈闌ける,[ろうたける],/(v1,vi)\n  pattern = ///\n    ^\n    (?<candidates> \\S+ )\n    (\n      \\x20\n      \\[\n        (?<readings> [^\\]]+ )\n        \\]\n      |\n      )\n    \\x20 \\/\n    (?<glosses> .* )\n    \\/\n    $\n    ///\n  return $ ( line, send ) =>\n    unless ( match = line.match pattern )?\n      warn \"unexpected format: #{rpr line}\"\n      return null\n    { candidates\n      readings\n      glosses   } = match.groups\n    candidates    = candidates.trim().split ';'\n    glosses       = glosses.trim().split '/'\n    glosses.pop() if ( last_of glosses ).startsWith 'EntL'\n    gloss         = glosses.join '; '\n    if readings? then readings  = readings.trim().split ';'\n    else              readings  = null\n    send { line, candidates, readings, gloss, }\n\n#-----------------------------------------------------------------------------------------------------------\n@$skip_blank_lines_and_comments = => PD.$filter ( line ) =>\n  return false if ( isa.blank_text line )\n  return false if ( line.startsWith '#' )\n  return false if ( line.startsWith '　？？？ ' ) # first line of edict2u as downloaded\n  return true\n\n#-----------------------------------------------------------------------------------------------------------\n@$filter_sample = => PD.$filter ( line ) => ( line.match /^ビー?ル[(\\s]/u )?\n\n#-----------------------------------------------------------------------------------------------------------\n@$fan_out = =>\n  return $ ( row, send ) =>\n    { readings\n      candidates\n      gloss\n      line } = row\n    unless readings?\n      for candidate in candidates\n        send { reading: candidate, candidate, gloss, line, }\n    else\n      for reading in readings\n        for candidate in candidates\n          send { reading, candidate, gloss, line, }\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$distribute_refined_readings = =>\n  ### Takes care of `reading`s like `いっさくねん(一昨年)` that are only valid for a subset of candidates. ###\n  refinements_pattern = /^(?<reading>[^(]+)\\((?<refinements>[^)]+)\\)$/\n  return $ ( row, send ) =>\n    { reading\n      candidate\n      gloss\n      line }      = row\n    return send row unless ( match = reading.match refinements_pattern )?\n    { reading\n      refinements }   = match.groups\n    refinements       = refinements.split /,/\n    # send { badge: 'µ33734', reading, refinements: ( jr refinements ), }\n    for candidate in refinements\n      send { reading, candidate, gloss, line, }\n\n#-----------------------------------------------------------------------------------------------------------\n@$validate_plural_row   = => PD.$watch ( row ) => validate.edict2u_plural_row   row\n@$validate_singular_row = => PD.$watch ( row ) => validate.edict2u_singular_row row\n\n#-----------------------------------------------------------------------------------------------------------\n@$normalize_ascii_and_kana = =>\n  return PD.$watch ( row ) =>\n    return null unless isa.edict2u_singular_row row\n    row.reading   = JACONV.toHanAscii row.reading\n    row.reading   = JACONV.toHiragana row.reading\n    row.candidate = JACONV.toHanAscii row.candidate\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$normalize_choonpu = =>\n  ### Supplement spellings that have a chōonpu (長音符; chōonkigō 長音記号, onbiki 音引き, bōbiki 棒引き)\n  with spellings that use the corresponding Hiragana vowel, so ぷーたろー is supplemented by ぷうたろう and\n  so on. ###\n  choon_kana_from_hepburn =\n    A: 'あ'\n    I: 'い'\n    U: 'う'\n    E: 'い'\n    O: 'う'\n  mapping = {}\n  #.........................................................................................................\n  return $ ( row, send ) =>\n    send row\n    return null unless isa.edict2u_singular_row row\n    { reading, } = row\n    reading = reading.replace /(.)ー/gu, ( $0, $1 ) =>\n      unless ( R = mapping[ $1 ] )?\n        R = mapping[ $1 ] = $1 + ( choon_kana_from_hepburn[ last_of ( as_hepburn $1 ) ] ? '' )\n      return R\n    send { row..., reading, } if reading isnt row.reading\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$add_kana_candidates = =>\n  return $ ( row, send ) =>\n    return null unless isa.edict2u_singular_row row\n    # send { row..., candidate: row.reading, }\n    # send { row..., candidate: ( JACONV.toKatakana row.reading ), }\n    send { row..., candidate: ( JACONV.toHiragana row.candidate ), }\n    send { row..., candidate: ( JACONV.toKatakana row.candidate ), }\n    send { row..., candidate: ( JACONV.toZenAscii row.candidate ), }\n    send { row..., candidate: ( JACONV.toHanKana  row.candidate ), }\n    send row\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$remove_annotations = =>\n  ### see http://www.edrdg.org/jmdictdb/cgi-bin/edhelp.py?svc=jmdict&sid=#kw_misc ###\n  pattern = /\\((?:ateji|gikun|iK|ik|io|oK|ok|P)\\)/g\n  return PD.$watch ( row ) =>\n    return null unless isa.edict2u_singular_row row\n    row.reading   = row.reading.replace     pattern, ''\n    row.candidate = row.candidate.replace   pattern, ''\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$collect_remarkables = =>\n  # pattern = /\\((?<annotation>[\\x00-\\xff]+)\\)/\n  pattern = /\\((?<annotation>[^)]+)\\)/\n  seen = new Set()\n  return PD.$watch ( row ) =>\n    return null unless isa.edict2u_singular_row row\n    for key in [ 'reading', 'candidate', ]\n      text = row[ key ]\n      continue if seen.has text\n      seen.add text\n      #.....................................................................................................\n      continue unless ( match = text.match pattern )?\n      #.....................................................................................................\n      { annotation, } = match.groups\n      continue if seen.has annotation\n      seen.add annotation\n      #.....................................................................................................\n      # color = if key is 'reading' then CND.orange else CND.lime\n      # debug 'µ33982', key, text\n      debug 'µ33982', jr [ key, row, ]\n    # help 'µ43993', 'reading:    ', row.reading   if ( row.reading.match    pattern )?\n    # urge 'µ43993', 'candidate:  ', row.candidate if ( row.candidate.match  pattern )?\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$remove_duplicates = =>\n  seen  = new Set()\n  count = 0\n  last  = Symbol 'last'\n  return $ ( row, send ) =>\n    if row is last\n      help \"µ33392 skipped #{count} duplicates\"\n      return null\n    key = \"#{row.reading}\\x00#{row.candidate}\"\n    if seen.has key\n      count += +1\n      # whisper \"duplicate: #{rpr key}\"\n      return null\n    seen.add key\n    send row\n\n#-----------------------------------------------------------------------------------------------------------\n@$as_sql = =>\n  first           = Symbol 'first'\n  last            = Symbol 'last'\n  is_first_record = true\n  return $ { first, last, }, ( row, send ) =>\n    #.......................................................................................................\n    if row is first\n      send \"insert into edict2u ( reading, candidate, gloss ) values\"\n    #.......................................................................................................\n    else if row is last\n      send \";\"\n    #.......................................................................................................\n    else if isa.edict2u_singular_row row\n      comma = if is_first_record then '' else ','\n      is_first_record = false\n      send \"#{comma}( #{as_sql row.reading}, #{as_sql row.candidate}, #{as_sql row.gloss} )\"\n  #.........................................................................................................\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$tee_write_sql = ( target_path ) =>\n  pipeline = []\n  pipeline.push @$as_sql()\n  pipeline.push @$as_line()\n  pipeline.push PD.write_to_file target_path\n  return PD.$tee PD.pull pipeline...\n\n#-----------------------------------------------------------------------------------------------------------\n@write_dictionary = ( settings ) -> new Promise ( resolve, reject ) =>\n  testing           = settings?.testing ? false\n  target_filename   = ( @_drop_extension PATH.basename settings.source_path ) + '.sql'\n  target_path       = abspath '../mingkwai-typewriter/.cache', target_filename\n  help \"translating #{rpr PATH.relative process.cwd(), settings.source_path}\"\n  #.........................................................................................................\n  return new Promise ( resolve ) =>\n    pipeline = []\n    pipeline.push PD.read_from_file settings.source_path\n    pipeline.push PD.$split()\n    pipeline.push @$skip_blank_lines_and_comments()\n    # pipeline.push @$filter_sample() if testing\n    pipeline.push @$split_fields()\n    pipeline.push @$validate_plural_row()\n    # pipeline.push PD.$show()\n    pipeline.push @$fan_out()\n    pipeline.push @$validate_singular_row()\n    pipeline.push @$normalize_ascii_and_kana()\n    # pipeline.push PD.$sample 100 / 200000\n    pipeline.push @$remove_annotations()\n    pipeline.push @$distribute_refined_readings()\n    pipeline.push @$normalize_choonpu()\n    # pipeline.push @$add_kana_candidates()\n    pipeline.push @$collect_remarkables()\n    pipeline.push @$remove_duplicates()\n    ### TAINT resolve may be called twice ###\n    # pipeline.push PD.$sort()                          if testing\n    # pipeline.push PSPG.$tee_as_table -> resolve()     if testing\n    ### TAINT resolve may be called before tee has finished writing (?) ###\n    pipeline.push @$tee_write_sql target_path\n    pipeline.push PD.$drain =>\n      help \"wrote output to #{rpr PATH.relative process.cwd(), target_path}\"\n      resolve()\n    PD.pull pipeline...\n    #.......................................................................................................\n    return null\n\n\n############################################################################################################\nunless module.parent?\n  testing = true\n  L = @\n  do ->\n    #.......................................................................................................\n    settings =\n      testing:      testing\n      source_path:  abspath './db/edict2u'\n      # source_path:  abspath './db/edict2u-test'\n    await L.write_dictionary settings\n    help 'ok'\n"
  ]
}