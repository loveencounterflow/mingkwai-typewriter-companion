{
  "version": 3,
  "file": "write-unames-and-texnames.js",
  "sourceRoot": "../..",
  "sources": [
    "src/ds-transforms/write-unames-and-texnames.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'IME/EXPERIMENTS/KB'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nFS                        = require 'fs'\nPATH                      = require 'path'\nPD                        = require 'pipedreams'\n{ $\n  $async\n  select }                = PD\n{ assign\n  jr }                    = CND\nSqlite_db                 = require 'better-sqlite3'\n\n\n#-----------------------------------------------------------------------------------------------------------\nxray = ( text ) -> ( ( ( chr.codePointAt 0 ).toString 16 ) for chr in Array.from text )\n\n#-----------------------------------------------------------------------------------------------------------\n@$reshape = ->\n  return $ ( d0, send ) ->\n    d = {}\n    names = [\n      [ 'ucid',        'ID'                   ]\n      [ 'uname',       'UNICODE DESCRIPTION'  ]\n      [ 'texname',     'latex'                ]\n      [ 'description', 'op dict'              ]\n      ]\n    d[ new_name ] = d0[ old_name ] for [ new_name, old_name, ] in names\n    send d\n\n#-----------------------------------------------------------------------------------------------------------\n@$omit_empty = ->\n  names = [ 'ucid', 'uname', 'texname', 'description', ]\n  return $ ( d, send ) ->\n    for name in names\n      delete d[ name ] if ( d[ name ].match /^\\s*$/ )?\n    send d\n\n#-----------------------------------------------------------------------------------------------------------\n@$cleanup_texname = ->\n  cleanup_texname = ( text ) ->\n    R = text\n    R = R.replace /\\\\/g,    ''\n    R = R.replace /[{}]/g,  '-'\n    R = R.replace /-+/g,    '-'\n    R = R.replace /^-/g,    ''\n    R = R.replace /-$/g,    ''\n    R = R.replace /'/g,     'acute'\n    return R\n  return $ ( d, send ) ->\n    d.texname = cleanup_texname d.texname if d.texname?\n    send d\n\n#-----------------------------------------------------------------------------------------------------------\n@$cleanup_uname = ->\n  cleanup_uname = ( text ) ->\n    return null unless text?\n    R = text\n    R = R.toLowerCase()\n    return R\n  return $ ( d, send ) ->\n    d.uname = cleanup_uname d.uname\n    send d\n\n#-----------------------------------------------------------------------------------------------------------\n@$distinct_tokens_from_uname = ->\n  split = ( text ) -> text.split /[\\s-]+/\n  seen  = new Set()\n  return $ ( d, send ) ->\n    for uname_token in split d.uname\n      continue if seen.has uname_token\n      seen.add uname_token\n      send { uname_token, } unless uname_token.length is 0\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$ranked_tokens_from_uname = ->\n  split = ( text ) -> text.split /[\\s-]+/\n  ranks = {}\n  last  = Symbol 'last'\n  return $ { last, }, ( d, send ) ->\n    if d is last\n      for uname_token, rank of ranks\n        send { uname_token, rank, }\n    else\n      for uname_token in split d.uname\n        continue if uname_token.length is 0\n        ranks[ uname_token ] = ( ranks[ uname_token ] ?= 0 ) + 1\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$skip_extraneous = ->\n  return PD.$filter ( d ) ->\n    return true unless d.uname?\n    return false if ( d.uname.match /^cjk compatibility ideograph/ )?\n    return false if ( d.uname.match /^language tag/ )?\n    return false if ( d.uname.match /^tag / )?\n    return false if ( d.uname.match /^variation selector-/ )?\n    return false if ( d.uname.match /^multiple character operator/ )?\n    return true\n\n#-----------------------------------------------------------------------------------------------------------\n@$_XXX_skip_whitespace_etc = ->\n  ### TAINT should implement symbolic whitespace representation ###\n  return PD.$filter ( d ) ->\n    return false unless d.glyph?\n    return false if ( d.glyph.match /^\\s+$/ )?\n    return false if ( d.glyph.match /^[\\x00-\\x20]+$/ )?\n    return true\n\n#-----------------------------------------------------------------------------------------------------------\n@$_XXX_skip_longer_texts = ->\n  ### TAINT must implement target texts with more than a single glyph ###\n  return PD.$filter ( d ) -> ( d.ucid.match /^U[0-9A-F]{5}$/ )?\n\n#-----------------------------------------------------------------------------------------------------------\n@$add_glyph = ->\n  return $ ( d, send ) ->\n    return send d unless d.ucid?\n    cid       = parseInt ( d.ucid.replace /^U/, '' ), 16\n    d.glyph   = String.fromCodePoint cid\n    d.cid_hex = 'u/' + cid.toString 16\n    delete d.ucid\n    send d\n\n#-----------------------------------------------------------------------------------------------------------\n@$as_tsv = ( names ) -> PD.$map ( d ) -> ( ( d[ name ] for name in names ).join '\\t' ) + '\\n'\n\n#-----------------------------------------------------------------------------------------------------------\ncsvesc    = ( text  ) -> text.replace /\"/g, '\"\"'\n\n#-----------------------------------------------------------------------------------------------------------\n@$as_csv = ( names ) ->\n  first = Symbol 'first'\n  return $ { first, }, ( d, send ) ->\n    if d is first\n      send ( ( \"\\\"#{csvesc name}\\\"\" for name in names ).join ',' ) + '\\n'\n    else\n      send ( ( \"\\\"#{csvesc d[ name ].toString()}\\\"\" for name in names ).join ',' ) + '\\n'\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$filter_unames               = -> PD.$filter ( d ) -> d.uname?    and d.glyph?\n@$filter_texnames             = -> PD.$filter ( d ) -> d.texname?  and d.glyph?\n@$skip_tautological_texnames  = -> PD.$filter ( d ) -> d.texname isnt d.glyph\n@$as_uname_tsv                = -> @$as_tsv [ 'cid_hex', 'glyph', 'uname',   ]\n@$as_texname_tsv              = -> @$as_tsv [ 'cid_hex', 'glyph', 'texname', ]\n@$as_uname_csv                = -> @$as_csv [ 'cid_hex', 'glyph', 'uname',   ]\n@$as_texname_csv              = -> @$as_csv [ 'cid_hex', 'glyph', 'texname', ]\n@$as_uname_token_csv          = -> @$as_csv [ 'uname_token', 'rank',         ]\n# @$as_uname_token_csv          = -> @$as_csv [ 'uname_token',                 ]\n\n#-----------------------------------------------------------------------------------------------------------\n@write_unames_and_texnames = ( settings ) ->\n  new_csv_parser  = require 'csv-parser'\n  strip_bom       = require 'strip-bom-stream'\n  njs_source      = FS.createReadStream settings.source_path\n  njs_source      = njs_source.pipe strip_bom()\n  njs_source      = njs_source.pipe new_csv_parser()\n  source          = PD.read_from_nodejs_stream njs_source\n  #.........................................................................................................\n  get_unames_byline = =>\n    pipeline        = []\n    pipeline.push @$filter_unames()\n    pipeline.push @$as_uname_csv()\n    # pipeline.push PD.$watch ( d ) => info d\n    pipeline.push PD.write_to_file settings.unames_target_path\n    return PD.pull pipeline...\n  #.........................................................................................................\n  get_uname_tokens_byline = =>\n    pipeline        = []\n    pipeline.push @$filter_unames()\n    # pipeline.push @$distinct_tokens_from_uname()\n    pipeline.push @$ranked_tokens_from_uname()\n    pipeline.push @$as_uname_token_csv()\n    # pipeline.push PD.$watch ( d ) => info d\n    pipeline.push PD.write_to_file settings.uname_tokens_target_path\n    return PD.pull pipeline...\n  #.........................................................................................................\n  get_texnames_byline = =>\n    pipeline        = []\n    pipeline.push @$filter_texnames()\n    pipeline.push @$skip_tautological_texnames()\n    pipeline.push @$as_texname_csv()\n    pipeline.push PD.write_to_file settings.texnames_target_path\n    return PD.pull pipeline...\n  #.........................................................................................................\n  convert = =>\n    pipeline        = []\n    pipeline.push source\n    # pipeline.push PD.$sample 1 / 2000\n    pipeline.push @$reshape()\n    pipeline.push @$omit_empty()\n    pipeline.push PD.$watch ( d ) => urge jr d if d.ucid.endsWith '0002D'\n    pipeline.push @$cleanup_texname()\n    pipeline.push @$cleanup_uname()\n    pipeline.push @$skip_extraneous()\n    pipeline.push @$_XXX_skip_longer_texts()\n    pipeline.push @$add_glyph()\n    pipeline.push @$_XXX_skip_whitespace_etc()\n    # pipeline.push PD.$show()\n    pipeline.push PD.$tee get_unames_byline()\n    pipeline.push PD.$tee get_uname_tokens_byline()\n    pipeline.push PD.$tee get_texnames_byline()\n    pipeline.push PD.$drain()\n    PD.pull pipeline...\n    return null\n  #.........................................................................................................\n  convert()\n  return null\n\nL = @\nsettings =\n  source_path:              PATH.resolve PATH.join __dirname, '../../db/unicode-names-and-entities.csv'\n  unames_target_path:       PATH.resolve PATH.join __dirname, '../../db/unames.csv'\n  uname_tokens_target_path: PATH.resolve PATH.join __dirname, '../../db/uname-tokens.csv'\n  texnames_target_path:     PATH.resolve PATH.join __dirname, '../../db/texnames.csv'\n\n#   db_path:              PATH.resolve PATH.join __dirname, '../../db/data.db'\n# settings.db = new Sqlite_db settings.db_path, { verbose: urge }\n\nL.write_unames_and_texnames settings\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  ]
}