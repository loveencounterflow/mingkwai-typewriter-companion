// Generated by CoffeeScript 2.4.1
(function() {
  /* TAINTs

  * deal with mssing characters

  * PY `ü` is written `u:`, use `ü`, `v` to replace

  * consider to collapse words from prefixes:
    咖 ->
      咖哩
      咖啡 ->
        咖啡伴侶
        咖啡因
        咖啡館 ->
          咖啡館兒 ->

   */
  'use strict';
  var $, $async, CND, FS, L, PATH, PD, TRIODE, assign, badge, debug, echo, help, info, jr, rpr, select, urge, warn, whisper, xray,
    indexOf = [].indexOf;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = '明快打字机/DS-TRANSFORMS/WRITE-CEDICT-PINYIN';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  FS = require('fs');

  PATH = require('path');

  PD = require('pipedreams');

  ({$, $async, select} = PD);

  ({assign, jr} = CND);

  TRIODE = require('triode');

  this._drop_extension = function(path) {
    return path.slice(0, path.length - (PATH.extname(path)).length);
  };

  //-----------------------------------------------------------------------------------------------------------
  xray = function(text) {
    var chr, i, len, ref, results;
    ref = Array.from(text);
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      chr = ref[i];
      results.push((chr.codePointAt(0)).toString(16));
    }
    return results;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$as_line = function() {
    return $((d, send) => {
      return send((jr(d)) + '\n');
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$name_fields = function() {
    return $((d, send) => {
      var target, transliteration;
      [transliteration, target] = d;
      return send({transliteration, target});
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$feed_triode = function() {
    var last, triode;
    last = Symbol('last');
    triode = TRIODE.new();
    return $({last}, (d, send) => {
      var ref, target;
      if (d === last) {
        return send(triode);
      }
      if ((target = triode.get(d.transliteration)) == null) {
        triode.set(d.transliteration, (target = []));
      }
      if (ref = d.target, indexOf.call(target, ref) < 0) {
        target.push(d.target);
      }
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$split_pinyin_and_gloss = function() {
    var pinyin_and_gloss_pattern;
    pinyin_and_gloss_pattern = /^\[(?<pinyin>.+?)\]\s+\/(?<gloss>.+?)\/$/;
    return $((fields, send) => {
      var gloss, ks, kt, match, pinyin, pinyin_and_gloss;
      [kt, ks, pinyin_and_gloss] = fields;
      if ((match = pinyin_and_gloss.match(pinyin_and_gloss_pattern)) == null) {
        throw new Error(`µ33833 illegal pinyin_and_gloss: ${rpr(pinyin_and_gloss)}`);
      }
      ({pinyin, gloss} = match.groups);
      gloss = gloss.split('/');
      return send({kt, ks, pinyin, gloss});
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$cleanup_pinyin = function() {
    return $((fields, send) => {
      fields.pinyin = fields.pinyin.replace(/[,\s0-5]/g, '');
      fields.pinyin = fields.pinyin.toLowerCase();
      return send(fields);
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$distill_traditional = function() {
    return $((fields, send) => {
      var kt, pinyin;
      ({kt, pinyin} = fields);
      return send({
        transliteration: pinyin,
        target: kt
      });
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$write_traditional_cdt = (target_path) => {
    var pipeline;
    pipeline = [];
    pipeline.push(this.$distill_traditional());
    pipeline.push(this.$feed_triode());
    pipeline.push($((triode, send) => {
      return send(triode.as_js_module_text());
    }));
    pipeline.push(PD.write_to_file(target_path));
    return PD.$tee(PD.pull(...pipeline));
  };

  //-----------------------------------------------------------------------------------------------------------
  this.write_keyboard = function(settings) {
    return new Promise((resolve, reject) => {
      var cdt_target_filename, cdt_target_path, convert;
      cdt_target_filename = (this._drop_extension(PATH.basename(settings.source_path))) + '.cdt.js';
      cdt_target_path = PATH.resolve(PATH.join(__dirname, '../../.cache', cdt_target_filename));
      help(`translating ${rpr(PATH.relative(process.cwd(), settings.source_path))}`);
      //.........................................................................................................
      convert = () => {
        var pipeline;
        pipeline = [];
        pipeline.push(PD.read_from_file(settings.source_path));
        // pipeline.push PD.$split()
        // pipeline.push PD.$sample 1 / 5000 #, seed: 12
        // pipeline.push $ ( line, send ) -> send line.replace /\s+$/, '\n' # prepare for line-splitting in WSV reader
        pipeline.push(PD.$split_wsv(3));
        pipeline.push(this.$split_pinyin_and_gloss());
        pipeline.push(this.$cleanup_pinyin());
        // pipeline.push PD.$show()
        pipeline.push(this.$write_traditional_cdt(cdt_target_path));
        pipeline.push(PD.$drain(() => {
          help(`wrote output to ${rpr(PATH.relative(process.cwd(), cdt_target_path))}`);
          return resolve();
        }));
        PD.pull(...pipeline);
        return null;
      };
      //.........................................................................................................
      convert();
      return null;
    });
  };

  //###########################################################################################################
  if (module.parent == null) {
    L = this;
    (async function() {
      var settings;
      //.......................................................................................................
      settings = {
        source_path: PATH.resolve(PATH.join(__dirname, '../../db/cedict_ts.u8'))
      };
      // postprocess: ( triode ) ->
      //   triode.disambiguate_subkey 'n', 'n.'
      //   triode.disambiguate_subkey 'v', 'v.'
      //   for subkey, superkeys of triode.get_all_superkeys()
      //     help "µ46474 resolving #{rpr subkey} -> #{rpr superkeys}"
      //     triode.apply_replacements_recursively subkey
      //   return null
      await L.write_keyboard(settings);
      return help('ok');
    })();
  }

}).call(this);

//# sourceMappingURL=write-cedict-pinyin.js.map
